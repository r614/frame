{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/roshan/dev/frame/frontend/pages/upload/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Form, Input, Button, Upload, Row, Col, Alert } from \"antd\";\nimport React, { useState } from \"react\";\nimport { InboxOutlined } from \"@ant-design/icons\";\nimport { useRouter } from 'next/router';\n\nconst R = require('rambda');\n\nconst axios = require('axios');\n\nconst BACKEND_URL = process.env.BACKEND_URL;\n\nconst post = async formData => {\n  if (R.isNil(formData.Images)) {\n    console.log(\"Error\");\n    throw 'Please select at least one image to upload';\n  }\n\n  axios.post(`${BACKEND_URL}/upload`, formData).then(res => res).catch(err => {\n    console.log(err);\n    throw 'Error uploading files.';\n  });\n};\n\nconst formItemLayout = {\n  labelCol: {\n    span: 4\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\n\nconst normFile = e => {\n  console.log(\"Upload event:\", e);\n\n  if (Array.isArray(e)) {\n    return e;\n  }\n\n  return e && e.fileList;\n};\n\nexport default function UploadPage() {\n  const onFinish = values => {\n    console.log(\"Received values of form: \", values);\n    setErrorMessage(\"\");\n    setErrorState(null);\n    post(values).then(res => {\n      setSuccessState(true);\n      const router = useRouter();\n      router.push(`${gallery}/${res.body.protected ? 'protected' : ''}gid=${res.body.gid}`);\n    }).catch(err => {\n      setErrorMessage(err);\n      setErrorState(true);\n    });\n  };\n\n  let {\n    0: error,\n    1: setErrorState\n  } = useState(null);\n  let {\n    0: errorMessage,\n    1: setErrorMessage\n  } = useState(\"\");\n  let {\n    0: success,\n    1: setSuccessState\n  } = useState(false);\n  return /*#__PURE__*/_jsxDEV(Row, {\n    type: \"flex\",\n    align: \"middle\",\n    justify: \"center\",\n    style: {\n      minHeight: \"100vh\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      type: \"flex\",\n      align: \"middle\",\n      justify: \"center\",\n      span: 8,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Upload \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" save the link(and password), you won't be seeing it again \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 65\n        }, this), \"links are only valid for 24hrs, though i doubt anyone's going to use this \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 3\n      }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n        type: \"success\",\n        message: \"Upload successful, redirecting to gallery\",\n        banner: true,\n        closable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 4\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        type: \"error\",\n        message: errorMessage,\n        banner: true,\n        closable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(Form, _objectSpread(_objectSpread({\n        name: \"validate_other\"\n      }, formItemLayout), {}, {\n        onFinish: onFinish,\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Password\",\n          children: /*#__PURE__*/_jsxDEV(Input.Password, {\n            placeholder: \"Optional; File will be public if not specified.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 4\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Image\",\n          children: /*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"Images\",\n            valuePropName: \"fileList\",\n            getValueFromEvent: normFile,\n            noStyle: true,\n            children: /*#__PURE__*/_jsxDEV(Upload.Dragger, {\n              name: \"files\",\n              beforeUpload: () => false,\n              accept: \"image/*\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"ant-upload-drag-icon\",\n                children: /*#__PURE__*/_jsxDEV(InboxOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"ant-upload-text\",\n                children: \"Click or drag file to this area to upload\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"ant-upload-hint\",\n                children: \"Supports single or bulk upload.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          wrapperCol: {\n            span: 12,\n            offset: 6\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }), void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/roshan/dev/frame/frontend/pages/upload/index.js"],"names":["Form","Input","Button","Upload","Row","Col","Alert","React","useState","InboxOutlined","useRouter","R","require","axios","BACKEND_URL","process","env","post","formData","isNil","Images","console","log","then","res","catch","err","formItemLayout","labelCol","span","wrapperCol","normFile","e","Array","isArray","fileList","UploadPage","onFinish","values","setErrorMessage","setErrorState","setSuccessState","router","push","gallery","body","protected","gid","error","errorMessage","success","minHeight","offset"],"mappings":"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","sourcesContent":["import { Form, Input,  Button, Upload, Row, Col, Alert } from \"antd\";\nimport React, { useState } from \"react\";\nimport { InboxOutlined } from \"@ant-design/icons\";\nimport { useRouter } from 'next/router'\nconst R = require('rambda');\nconst axios = require('axios');\n\nconst BACKEND_URL = process.env.BACKEND_URL\n\nconst post = async(formData) => {\n\t\tif(R.isNil(formData.Images)) {\n\t\t\tconsole.log(\"Error\")\n\t\t\tthrow 'Please select at least one image to upload'\n\t\t}\n\t\taxios.post(`${BACKEND_URL}/upload`, formData)\n\t\t\t.then((res) => res)\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err)\n\t\t\t\tthrow 'Error uploading files.'\n\t\t\t})\n}\n\nconst formItemLayout = {\n  labelCol: {\n    span: 4,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\n\nconst normFile = (e) => {\n  console.log(\"Upload event:\", e);\n\n  if (Array.isArray(e)) {\n    return e;\n  }\n\n  return e && e.fileList;\n};\n\nexport default function UploadPage() {\n  const onFinish = (values) => {\n\tconsole.log(\"Received values of form: \", values);\n\tsetErrorMessage(\"\") \n\tsetErrorState(null)\n\n\tpost(values)\n\t.then((res) => {\n\t\tsetSuccessState(true)\n\t\tconst router = useRouter()\n\t\trouter.push(`${gallery}/${res.body.protected ? 'protected' : ''}gid=${res.body.gid}`)\n\t\t})\n\t.catch((err) => { \n\t\tsetErrorMessage(err) \n\t\tsetErrorState(true)\n\t})\n  };\n\n  let [error, setErrorState] = useState(null)\n  let [errorMessage, setErrorMessage] = useState(\"\")\n  let [success, setSuccessState] = useState(false)\n\n\n  return (\n    <Row type=\"flex\" align=\"middle\" justify=\"center\"style={{ minHeight: \"100vh\" }}>\n      <Col type=\"flex\" align=\"middle\" justify=\"center\" span={8}>\n\t  \t<h1> Upload </h1>\n\t\t<p> save the link(and password), you won't be seeing it again <br />\n\t\t\t links are only valid for 24hrs, though i doubt anyone's going to use this </p>\n\t  \t{ \n\t\t\tsuccess &&\n\t\t\t<Alert\n\t\t\ttype=\"success\"\n\t\t\tmessage=\"Upload successful, redirecting to gallery\"\n\t\t\tbanner\n\t\t\tclosable\n\t\t\t/>\n\t\t}\n\n\t\t{\n\t\t\terror && \n\t\t\t<Alert\n\t\t\ttype=\"error\"\n\t\t\tmessage={errorMessage}\n\t\t\tbanner\n\t\t\tclosable\n\t\t\t/>\n\t\t}\n\n\n        <Form name=\"validate_other\" {...formItemLayout} onFinish={onFinish}>\n          \n\t\t<Form.Item\n\t\t\tlabel=\"Password\"\n\t\t>\n\t\t\t<Input.Password\n\t\t\tplaceholder=\"Optional; File will be public if not specified.\"\n\t\t\t />\n\t\t</Form.Item>\n\n          <Form.Item label=\"Image\">\n            <Form.Item\n              name=\"Images\"\n              valuePropName=\"fileList\"\n              getValueFromEvent={normFile}\n              noStyle\n            >\n              <Upload.Dragger\n                name=\"files\"\n                beforeUpload={() => false}\n                accept=\"image/*\"\n              >\n                <p className=\"ant-upload-drag-icon\">\n                  <InboxOutlined />\n                </p>\n                <p className=\"ant-upload-text\">\n                  Click or drag file to this area to upload\n                </p>\n                <p className=\"ant-upload-hint\">\n                  Supports single or bulk upload.\n                </p>\n              </Upload.Dragger>\n            </Form.Item>\n          </Form.Item>\n          <Form.Item\n            wrapperCol={{\n              span: 12,\n              offset: 6,\n            }}\n          >\n            <Button type=\"primary\" htmlType=\"submit\">\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      </Col>\n    </Row>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}